<?php
Zend_Loader_Autoloader::getInstance();
require_once 'IMapperBase.php';
// application/models/CarMakesMapper.php

class Default_Model_CarMakesMapper extends MapperBase
{
	public function __construct(){
		$this->setDbTable('Default_Model_DbTable_CarMakes');
		parent::__construct();
	}
	/**
	 * 
	 * @return Default_Model_CarMakesMapper
	 */
	/*static public function getInstance(){
		return parent::getInstance();
	}*/
	/**
	 * 
	 * @param $car_make_name The name of the car brand e.g. Volvo
	 * @return car_make_id
	 */
	public function getCarMakeIdByCarMakeName($car_make_name){
		// first lookup the car makes
		assertEx($car_make_name,"Sorry but I need a car_make_name. Nothing was given");
		$db = $this->getDbAdapter();
		$qoute_car_make_name = ($db->quote($car_make_name));
		//$car_obj = $this->fetchAll_Array(' `car_make_name`= $qoute_car_make_name ');
		$car_make_row_zend = $this->getDbTable()->fetchRow(" `car_make_name`= $qoute_car_make_name ");
		//print "<hr>before if";
		if(isset($car_make_row_zend)){
			assertEx(get_class($car_make_row_zend)=='Zend_Db_Table_Row'
				,'$car_make_row_zend was not a Zend_Db_Table_Row, it was a '.get_class($car_make_row_zend));
				//	print "<hr>before d   ";				
			$car_make_row = $car_make_row_zend->toArray();
				//	print "<hr>before e   ";
			if(isset($car_make_row['car_make_main_id'])){
				//		print "<hr>before n   ";
				assertEx($car_make_row['car_make_main_id']>0,'The car_make_id was not found in the main_id '
					.var_export($car_make_row,true));
				//		print "<hr>before r   ";
				return $car_make_row['car_make_main_id'];
			}
			assertEx($car_make_row['car_make_id']>0,'The new car_make_id was not found in car_make_id '
				.$car_make_row['car_make_main_id']);
			return $car_make_row['car_make_id'];
			/*if($car_make_row['state']='Offentlig'){
				return $car_make_row['car_model_main_id'];
			}*/
		}

		// if it does not exist, create it.
		//assertEx("",'The new car_make "'.$car_make_name.'" was'.$new_cmo_id);
		$new_cmo_obj = new Default_Model_CarMakes(array('car_make_name'=>$car_make_name));
		$new_cmo_id = $this->save($new_cmo_obj);
		//$new_cmo_obj;
		assertEx($new_cmo_id>1,'The new car_make was perhaps saved, but I dont know the ID?');
//		assertEx("",'The new car_make "'.$car_make_name.'" was'.$new_cmo_id);
		return $new_cmo_id;		
	}
	
    public function save(Default_Model_CarMakes  $carmake)
    {
    	//global $_SERVER;
         /*	From AutoGeneratedClass
		  * private $_car_make_id=null;
			private $_car_make_name=null;
			private $_car_make_main_id=null;
			private $_created=null;
			private $_created_by=null;
			private $_state=null;
			private $_updated=null;
			private $_updated_by=null;*/
    	$data = array(
            'car_make_name'   => $carmake->Car_make_name,// + $carmake->getCreated_by(),
    		'created_by'	  => $carmake->Created_by,//.'a = '.trim(htmlentities($_SERVER["PHP_AUTH_USER"])),
    		'updated_by'	  => $carmake->Created_by,//.'a'.$_SERVER["PHP_AUTH_USER"],
    	//	'state_enum'      => $carmake->State_enum,	
            'created' 		  => date('Y-m-d H:i:s'),
            'updated' 		  => date('Y-m-d H:i:s')    	
        );
    	//assertEx("","In save part ".var_export($data,true));        
        if (null === ($id = $carmake->Car_make_id)) {
            unset($data['car_make_id']);
            //$car_make_id = $carmake->InsertIntoDb(xmlModelHandler::get_DB_SCHEMA());
            if($data['car_make_name']== ""){
            	//var_dump($data);
            	throw new Exception('No car make name defined in class!');
            }
            $data['state_enum']= state_enum::_public;
           // $data['state_enum']= "Foreslag";
            //echo "<H3>Saving - ".$data['car_make_name']." <H3/>";
            //die(ArrayToXML::toXml($data,'Test'));
            //Bildelspriser_XmlImport_PriceParser::getInstance()->log("Before save of Car Make: ".$data['car_make_name'].' ');           
            $car_make_id = $this->getDbTable()->insert($data);
            Bildelspriser_XmlImport_PriceParser::getInstance()->log("Car Make Saved: '".$data['car_make_name']." id ".$car_make_id.' ');           
            //assertEx("","In insert part - after insert $car_make_id ".var_export($data,true));            
            assertEx($car_make_id,"The car_make = ".$data['car_make_name']." was saved and but the car_make_id was not returned ");
            //assertEx("","In insert part ".var_export($data,true));
            return $car_make_id;
        } else {
        	//unset($data['created_by']);		// 
        	//unset($data['created']);        //	
        	//unset($data['car_make_name']);  // it is never possible to change a car_make_name - only its state      	
        	$data['updated']=date('Y-m-d H:i:s');
        	//$data['updated_by']=date('Y-m-d H:i:s');
        	//$carmake->UpdateToDb(xmlModelHandler::get_DB_SCHEMA());
//        	die('Finally an update - id = ' .$id);
        	$this->getDbTable()->update($data, array('car_make_id = ?' => $id));
			assertEx("","In Update part ".var_export($data,true));			
        	return $data['car_make_id'];
        }
    }

   
   /* public function findAndSet($id, Default_Model_CarMakes $carmake)
    {
        //$result = $this->getDbTable()->find($id);
        $result = car_makes::GetWhere("car_make_id = $id;");
        //$result = car_makes::GetWhere()
        if (0 == count($result)) {
            return;
        }
        $carmake->setAllFromGenClass($result->current());
        /*$row = $result->current();
        $carmake->setId($row->id)
                  ->setEmail($row->email)
                  ->setComment($row->comment)
                  ->setCreated($row->created);* /
                 
    }*/
    
    /**
     * 
     * @param $select
     * @return Array of Associative Arrays containing CarMakes 
     */
   /*Moved to base class
    * 
    * public function fetchAll_Array($select){
        try{
        	$resultSet = $this->getDbTable()->fetchAll($select);
    	}
    	catch(Exception $e){
    		echo "<br><b>Exception occured<b><br> -- SQL: '$select' ";
    		var_dump($e,$select); 
    	}
    	return $resultSet->toArray();
    }*/

    /**
     * 
     * @param $select
     * @return CarMakes
     */
    public function fetchAll_AsObjects($select)
    {
		$resultSet = self::fetchAll_Array($select);
    	$entries   = array();
    	$c= 0;
        foreach ($resultSet as $row) {
            $entry = new Default_Model_CarMakes($entries);
            /*$entry->setId($row->id)
                  ->setEmail($row->email)
                  ->setComment($row->comment)
                  ->setCreated($row->created)
                  ->setMapper($this);*/
            //$entry->setAllFromGenClass($row);      
            $entries[] = $entry;
//            echo " c="+$c++;
        }
        return $entries;
    }     
    
    public static function getMakes($p_array){
    	$array;
    	if(is_array($p_array))
    		$array = $p_array;
    	else
    		$array = array();
		$makes = MapperFactory::getCmaMapper();
		$m = new Default_Model_Base();
		//$mb = new MapperBase('car_models');
		$db = $makes->getDbAdapter();
		$select = $db->select()->from('car_makes_v')->columns(array('car_make_name','car_make_id'))->where('1=1');
		$rows = $select->query()->fetchAll(Zend_Db::FETCH_ASSOC);
		$r = $array;
		foreach($rows as $row){
			//print_r($row);
			//print "<hr>";
			//$id = $row['']
			$id =  (int)$row['car_make_id'];
			$name = utf8_encode($row['car_make_name']); 
			//echo "</br> $id - $name ";
			$r[$id] = $name;
		}
		//print_r($r);
		return $r;
	}
}

